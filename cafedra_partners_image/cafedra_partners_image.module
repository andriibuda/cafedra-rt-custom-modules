<?php
/**
* @file
* A description of what your module does.
*/

/**
 * Implements hook_field_formatter_info().
 */
function cafedra_partners_image_field_formatter_info()
{
    return array(
        'partners_image' => array(
            // Machine name of formatter
            'label' => t('Partner Image'),
            'field types' => array('image')
        )
    );
}

/**
 * Implements hook_field_formatter_view().
 */
function cafedra_partners_image_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display)
{
    switch($display['type']) {
        case 'partners_image':
            $element = array();
            // Check if the formatter involves a link.
            if (!empty($entity->field_partner_link)) {
                $url_field = field_get_items($entity_type, $entity, 'field_partner_link');
                $url = array(
                    'path' => $url_field[0]['safe_value'],
                    'option' => array(),
                );
            } else {
                $url = '';
            }

            foreach ($items as $delta => $item) {
                if (isset($link_file)) {
                    $uri = array(
                        'path' => file_create_url($item['uri']),
                        'options' => array(),
                    );
                }
                $markup = theme_image_partner_formatter(array(
                    'item' => $item,
                    'image_style' => $display['settings']['image_style'],
                    'path' => $url
                ));
                $element[$delta] = array(
                    '#markup' => $markup,
                );
            }
            return $element;
    }
}


/**
 * Additional function for creating image-links with target="_blank"
 * @param $variables
 * @return string
 */
function theme_image_partner_formatter($variables) {
    $item = $variables['item'];
    $image = array(
        'path' => $item['uri'],
    );

    if (array_key_exists('alt', $item)) {
        $image['alt'] = $item['alt'];
    }

    if (isset($item['attributes'])) {
        $image['attributes'] = $item['attributes'];
    }

    if (isset($item['width']) && isset($item['height'])) {
        $image['width'] = $item['width'];
        $image['height'] = $item['height'];
    }

    // Do not output an empty 'title' attribute.
    if (isset($item['title']) && drupal_strlen($item['title']) > 0) {
        $image['title'] = $item['title'];
    }

    if ($variables['image_style']) {
        $image['style_name'] = $variables['image_style'];
        $output = theme('image_style', $image);
    }
    else {
        $output = theme('image', $image);
    }

    // The link path and link options are both optional, but for the options to be
    // processed, the link path must at least be an empty string.
    if (isset($variables['path']['path'])) {
        $path = $variables['path']['path'];
        $options = isset($variables['path']['options']) ? $variables['path']['options'] : array();
        // When displaying an image inside a link, the html option must be TRUE.
        $options['html'] = TRUE;
        $options['attributes']['target'] = '_blank';
        $output = l($output, $path, $options);
    }
    return $output;
}